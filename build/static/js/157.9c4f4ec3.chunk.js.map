{"version":3,"file":"static/js/157.9c4f4ec3.chunk.js","mappings":"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","sources":["utils/helpers.js","components/ClientDashboardAdmin.js"],"sourcesContent":["export const generateUniqueId = () => {\n  return '_' + Math.random().toString(36).substr(2, 9);\n};\n\nexport const sortClientsByName = (clients) => {\n  return [...clients].sort((a, b) => {\n    const nameA = (a.name || '').toLowerCase();\n    const nameB = (b.name || '').toLowerCase();\n    return nameA.localeCompare(nameB);\n  });\n};","import React, { useState, useEffect } from 'react';\nimport { sortClientsByName } from '../utils/helpers';\n\nconst ClientDashboardAdmin = ({ clients, onSelectClient }) => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [sortedClients, setSortedClients] = useState([]);\n  const [expandedClient, setExpandedClient] = useState(null); // Nuevo estado para el cliente expandido\n\n  useEffect(() => {\n    const filtered = clients.filter(client =>\n      (client.name?.toLowerCase() || '').includes(searchTerm.toLowerCase()) ||\n      (client.email?.toLowerCase() || '').includes(searchTerm.toLowerCase())\n    );\n    setSortedClients(sortClientsByName(filtered));\n  }, [clients, searchTerm]);\n\n  const handleToggleExpand = (clientId) => {\n    setExpandedClient(expandedClient === clientId ? null : clientId);\n  };\n\n  return (\n    <div className=\"p-6 bg-white rounded-2xl shadow-md\">\n      <h2 className=\"text-2xl font-bold text-gray-800 mb-6\">Administración de Clientes</h2>\n\n      <div className=\"mb-6\">\n        <input\n          type=\"text\"\n          placeholder=\"Buscar por nombre o email...\"\n          value={searchTerm}\n          onChange={(e) => setSearchTerm(e.target.value)}\n          className=\"w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-black transition\"\n        />\n      </div>\n\n      {sortedClients.length === 0 ? (\n        <p className=\"text-gray-600 text-center py-4\">No hay clientes registrados que coincidan con la búsqueda.</p>\n      ) : (\n        <div className=\"overflow-x-auto\">\n          <table className=\"min-w-full bg-white rounded-lg shadow-sm\">\n            <thead>\n              <tr className=\"bg-gray-100 border-b border-gray-200\">\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Nombre</th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Email</th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Última Rutina</th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Progreso</th>\n                <th className=\"px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">Acciones</th>\n              </tr>\n            </thead>\n            <tbody className=\"divide-y divide-gray-200\">\n              {sortedClients.map((client, index) => {\n                // Debug: verificar que cada cliente tenga un ID único\n                const clientKey = client.id || client.client_id || client.email || index;\n                console.log('ClientDashboardAdmin - client:', client, 'key:', clientKey);\n                \n                return (\n                  <React.Fragment key={clientKey}>\n                    <tr>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\n                        <button\n                          onClick={() => handleToggleExpand(clientKey)}\n                          className=\"flex items-center text-blue-600 hover:text-blue-800 transition-colors\"\n                        >\n                          {expandedClient === clientKey ? (\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth=\"2\" stroke=\"currentColor\" className=\"w-4 h-4 mr-1\">\n                              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M19.5 8.25l-7.5 7.5-7.5-7.5\" />\n                            </svg>\n                          ) : (\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth=\"2\" stroke=\"currentColor\" className=\"w-4 h-4 mr-1\">\n                              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M8.25 4.5l7.5 7.5-7.5 7.5\" />\n                            </svg>\n                          )}\n                          {client.name || client.fullName || client.email}\n                        </button>\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">{client.email}</td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">{client.lastRoutine || 'N/A'}</td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">{client.progress || 0}%</td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm font-medium space-x-2\">\n                        <button\n                          onClick={() => onSelectClient(client)}\n                          className=\"px-3 py-1 rounded-lg bg-blue-600 text-white hover:bg-blue-700 transition-all duration-300 ease-in-out text-xs font-semibold shadow-sm\"\n                        >\n                          Ver Rutinas\n                        </button>\n                      </td>\n                    </tr>\n                    {expandedClient === clientKey && (\n                      <tr>\n                        <td colSpan=\"5\" className=\"px-6 py-4 bg-gray-50 border-t border-gray-200\">\n                          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm text-gray-700\">\n                            <div>\n                              <p><span className=\"font-semibold\">Edad:</span> {client.age || 'N/A'}</p>\n                              <p><span className=\"font-semibold\">Peso:</span> {client.weight || 'N/A'} kg</p>\n                              <p><span className=\"font-semibold\">Altura:</span> {client.height || 'N/A'} cm</p>\n                            </div>\n                            <div>\n                              <p><span className=\"font-semibold\">Teléfono:</span> {client.phone || 'N/A'}</p>\n                              <p><span className=\"font-semibold\">Objetivos:</span>{\" \"}\n                                {Array.isArray(client.goals)\n                                  ? client.goals.length > 0\n                                    ? client.goals.join(', ')\n                                    : 'N/A'\n                                  : typeof client.goals === 'string' && client.goals.trim() !== ''\n                                    ? client.goals\n                                    : 'N/A'}\n                              </p>\n                            </div>\n                          </div>\n                        </td>\n                      </tr>\n                    )}\n                  </React.Fragment>\n                );\n              })}\n            </tbody>\n          </table>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ClientDashboardAdmin;"],"names":["generateUniqueId","Math","random","toString","substr","sortClientsByName","clients","sort","a","b","nameA","name","toLowerCase","nameB","localeCompare","_ref","onSelectClient","searchTerm","setSearchTerm","useState","sortedClients","setSortedClients","expandedClient","setExpandedClient","useEffect","filtered","filter","client","_client$name","_client$email","includes","email","_jsxs","className","children","_jsx","type","placeholder","value","onChange","e","target","length","map","index","clientKey","id","client_id","console","log","React","onClick","clientId","xmlns","fill","viewBox","strokeWidth","stroke","strokeLinecap","strokeLinejoin","d","fullName","lastRoutine","progress","colSpan","age","weight","height","phone","Array","isArray","goals","join","trim"],"sourceRoot":""}